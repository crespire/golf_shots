#!/usr/bin/env ruby

require 'csv'

# Load CSV file
def load_data(file_path)
  CSV.read(file_path, headers: true, converters: :numeric)
end

# Calculate quartiles manually
def quartiles(values)
  sorted = values.sort
  mid = sorted.length / 2
  q1 = sorted.length.even? ? (sorted[mid / 2 - 1] + sorted[mid / 2]) / 2.0 : sorted[mid / 2]
  q3 = sorted.length.even? ? (sorted[mid + mid / 2 - 1] + sorted[mid + mid / 2]) / 2.0 : sorted[mid + mid / 2]
  [q1, q3]
end

# Compute median manually
def median(values)
  sorted = values.sort
  len = sorted.length
  len.odd? ? sorted[len / 2] : (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0
end

# Detect and remove outliers using the 1.5*IQR rule
def filter_outliers(data, club_type, key_metrics)
  data = data.select { |row| row["Club Type"].downcase.include?(club_type) }

  key_metrics.each do |metric|
    values = data.map { |row| row[metric].to_f if row[metric] }.compact
    next if values.empty?

    q1, q3 = quartiles(values)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    data = data.select { |row| row[metric] && row[metric].to_f >= lower_bound && row[metric].to_f <= upper_bound }
  end
  data
end

# Find the most representative shot
def find_representative_shot(data, key_metrics)
  medians = key_metrics.map do |metric|
    values = data.map { |row| row[metric].to_f if row[metric] }.compact
    [metric, median(values)]
  end.to_h

  data.min_by do |row|
    key_metrics.sum { |metric| (row[metric].to_f - medians[metric]).abs }
  end
end

# Get a shot number
def get_shot(data, shot)
  data.select { |row| row[0].to_i == shot.to_i }.first
end

# Get file path from command-line arguments
if ARGV.empty?
  puts 'Usage: shot <file_path> <club>'
  puts 'Defaults to wedge type club'
  puts 'Filters shots on 4 key metrics and finds the median of the filtered set'
  puts 'Ball speed, carry, efficiency and offline yardage.'
  exit 1
end

file_path = ARGV[0]
data = load_data(file_path)

should_exit = false
until should_exit
  puts "Would you like to:"
  puts "1) Get a shot from the data set"
  puts "2) Find the best average shot"
  puts "3) Quit"
  print "> "
  valid = false
  until valid
    action = STDIN.gets.chomp
    valid = ["1", "2", "3", "s", "shot", "a", "average", "q", "quit"].include?(action.downcase)
    should_exit = ["q", "quit"].include?(action.downcase)

    case action.downcase
    when "1", "s", "shot"
      min = 1
      max = data.values_at(-1).first[0]
      print "Which shot? (#{min} - #{max}) "
      valid = false
      until valid
        shot_input = STDIN.gets.chomp
        valid = (min..max).cover?(shot_input.to_i) || ["q", "quit"].include?(shot_input.downcase)
        should_exit = ["q", "quit"].include?(shot_input.downcase)
      end
      shot = get_shot(data, shot_input)
      shot.each do |k, v|
        next if v.nil?
        next if ["Club Name", "Club Type", "Shot Created Date"].include?(k)

        puts "#{k}: #{v}"
      end
    when "2", "a", "average"
      club_type = ARGV[1] || "wedge"
      key_metrics = ['Ball Speed (mph)', 'Carry (yds)', 'Efficiency', "Offline (yds L-/R+)"]
      filtered_data = filter_outliers(data, club_type, key_metrics)
      if filtered_data.empty?
        puts "No data found with club type of #{club_type}"
      else
        representative_shot = find_representative_shot(filtered_data, key_metrics).to_h
        representative_shot.each do |k, v|
          next if v.nil?
          next if ["Club Name", "Club Type", "Shot Created Date"].include?(k)

          puts "#{k}: #{v}"
        end
      end
    end
  end
end
